iOS架构总结
1、面向服务的架构
在服务器端开发中很常见，它把业务分成了多个逻辑独立的组件。一个组件相当于一个Service，封装了与其业务相关的功能。Service是对整个架构纵向逻辑切分的结果。抛开业务逻辑谈Service基本没有意义，Service通常与数据库表的设计紧密相关。

应用层--服务层--数据层
服务层和数据层把复杂的逻辑封装起来，作为 Framework 提供接口给上层调用。应用层只能调用服务层暴露出来的接口，而不能直接调用数据层。层次结构加强了可重用性和可测试性。应用层调用服务层提供的简单接口获得数据或者实行用户操作。服务层也不需要知道数据层中网络请求，服务器同步，以及数据持久化的具体实现。服务层，数据层，以及应用层都能很容易实现各自的单元测试（Unit Test）。

应用层
也叫展示层，负责UI与展示逻辑。V与C的集合。C主要负责a、从Service获得数据（ViewModel）并且展示 b、相应用户操作，调用相应的Service接口 c、监听Service层发出的消息，并执行相应操作

服务层
定义一系列Service和供给应用层使用的ViewModel。Service封装主要业务逻辑，负责把底层持久化的Model和网络请求返回的转换成ViewModel，在提供给应用层使用。

数据层
提供简化的数据访问接口，主要包括：a、数据存储 b、网络请求 c、数据同步

2、架构设计需要考虑的
一个app，最核心的其实就是数据，数据来源是Api，所有架构设计可以先从API开始

API
（1）制定安全机制
   为什么？a、保证API的调用者是经过自己授权的APP b、保证数据传输的安全
   a类问题的解决方案可以采用设计签名的方式，对每个客户端，分别分配一个AppKey和AppSecret。（需要调用API时，将AppKey加入请求参数列表，并将AppSecret和所有参数一起，根据某种签名算法生成一个签名字符串，然后调用API时把该签名字符串也一起带上。服务端收到请求之后，根据请求中的AppKey查询相应的AppSecret，按照同样的签名算法，也生成一个签名字符串，当服务端生成的签名和请求带过来的签名一致的时候，那就表示这个请求的调用者是经过自己授权的，证明这个请求是安全的。而且，每个端都有一个Key，也方便不同端的标识和统计。为了防止AppSecret被别人获取，这个AppSecret一般写死在代码里面。另外，签名算法也需要有一定的复杂度，不能轻易被别人破解，最好是采用自己规定的一套签名算法，而不是采用外部公开的签名算法。另外，在参数列表中再加入一个时间戳，还可以防止部分重放攻击。）
   b类问题主要就是采用HTTPS了。
（2）接口协议标准化
   API一般采用JSON格式进行传输。
（3）接口版本控制
    a、每个接口有各自的版本，一般为接口添加个version的参数；
    b、整个接口系统有统一的版本，一般在URL中添加版本号，比如http://api.domain.com/v2

架构分层
（1）三层架构 数据层、业务层、展示层
基本同上（面向服务的架构）

环境分离
测试环境、生产环境、开发环境、预生产环境
iOS：target Android：Gradle


基础知识总结
1、使用结构体的好处：a 值类型，简单、容易理解，线程安全 b、松耦合VC，减少VC之间可能的交互 c、减少了Statefulness 和 Mutability d、更高效，占用更少内存
2、JSON的值只有六种数据类型：Number：整数或浮点数 String：字符串 Boolean：true 或 false Array：数组包含在方括号[]中 Object：对象包含在大括号{}中 Null：空类型
3、单一职责原则

开发规范总结
1、接口协议文档：主要内容包括每个接口的描述、入参、输出结果等，需要统一标准且严格执行
